from Log.models import ExceptionEvent
from Log.models import ResponseEvent
from Log.models import RequestEvent
from Log.models import ViewEvent
from People.models import Person
from datetime import datetime

class CustomRequestLogger(object):
    def process_request(self, request):
        try:
            if not request.META['PATH_INFO'].startswith('/admin'):
                try:
                    event = RequestEvent()
                    event.event = "Request"
                    event.user = request.user
                    event.addr = request.META['REMOTE_ADDR']
                    event.date = datetime.now()
                    event.url = request.META['PATH_INFO']
                    event.save()
                except ValueError:
                    pass
                except AttributeError:
                    pass
        except KeyError:
            pass
        return None

class CustomViewLogger(object):
    def process_view(self, request, view, args, kwargs):
        try:
            if not request.META['PATH_INFO'].startswith('/admin'):
                try:
                    event = ViewEvent()
                    event.event = "View"
                    event.user = request.user
                    event.addr = request.META['REMOTE_ADDR']
                    event.date = datetime.now()
                    event.view = view.__name__
                    event.args = str(args)
                    event.kwargs = str(kwargs)
                    event.save()
                except ValueError:
                    pass
                except AttributeError:
                    pass
        except KeyError:
            pass
        return None

class CustomResponseLogger(object):
    def process_response(self, request, response):
        try:
            if not request.META['PATH_INFO'].startswith('/admin'):
                try:
                    event = ResponseEvent()
                    event.event = "Response"
                    event.user = request.user
                    event.addr = request.META['REMOTE_ADDR']
                    event.date = datetime.now()
                    event.url = request.META['PATH_INFO']
                    event.size = len(response.content)
                    event.save()
                except ValueError:
                    pass
                except AttributeError:
                    pass
        except KeyError:
            pass
        return response

class CustomExceptionLogger(object):
    def process_exception(self, request, exception):
        try:
            if not request.META['PATH_INFO'].startswith('/admin'):
                try:
                    event = ExceptionEvent()
                    event.event = "Exception"
                    event.user = request.user
                    event.addr = request.META['REMOTE_ADDR']
                    event.date = datetime.now()
                    event.url = request.META['PATH_INFO']
                    event.exception = exception
                    event.save()
                except ValueError:
                    pass
                except AttributeError:
                    pass
        except KeyError:
            pass
        return None

class AddFooter(object):
    def process_response(self, request, response):
        footer = "<HR>This page was generated by iFriends \n</body>\n</html>"
        contents = response.content
        contents = contents.replace('</body>\n</html>', footer)
        response.content = contents

        return response

class PersonIPAddressCapture(object):
    def process_request(self, request):
        try:
            real_ip = request.META['HTTP_X_FORWARDED_FOR']
        except KeyError:
            real_ip = None

        if real_ip:
            try:
                p = Person.objects.get(userID = request.user)
                real_ip = real_ip.split(",")[0]
                p.desc = real_ip
                p.save()
            except TypeError:
                pass
            except AttributeError:
                pass
